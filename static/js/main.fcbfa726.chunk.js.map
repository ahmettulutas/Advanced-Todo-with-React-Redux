{"version":3,"sources":["form/formSlice.js","form/form.js","display/displaySlice.js","display/displayTasks.js","components/quoteMaker.js","components/footer.js","App.js","store.js","index.js"],"names":["options","name","initialState","reducers","addTodo","state","action","task","payload","todo","id","Math","floor","random","completed","deleteTodo","filter","item","switchTodo","map","filterTodo","formReducer","createSlice","actions","Form","useState","setTask","dispatch","useDispatch","className","onSubmit","e","preventDefault","TextField","label","placeholder","value","required","onChange","prev","target","toUpperCase","Button","type","variant","endIcon","onClick","selectAllTodos","allTodo","DisplayTask","taskstoDisplay","useSelector","size","startIcon","color","QuoteMaker","quote","setQuote","a","fetch","response","json","quotes","useEffect","fetchQuotes","then","data","text","Footer","href","App","store","configureStore","reducer","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.fcbfa726.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n//helper function to set todo item object\r\nconst makeTodo = (task) => {\r\n  return {\r\n    todo: task,\r\n    id: Math.floor(Math.random() * 100000),\r\n    completed: false\r\n  };\r\n};\r\nconst initialState = [];\r\nconst options = {\r\n  name: \"todo\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      return [...state, makeTodo(action.payload)];\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      return state.filter((item) => item.id !== action.payload);\r\n    },\r\n    switchTodo: (state, action) => {\r\n      return state.map((item) =>\r\n        item.id === action.payload\r\n          ? { ...item, completed: !item.completed }\r\n          : item\r\n      );\r\n    },\r\n    filterTodo: (state, action) => {\r\n      return state.filter((item) => !item.completed);\r\n    }\r\n  }\r\n};\r\n//Redux toolkit to create a slice of reducer\r\nexport const formReducer = createSlice(options);\r\n// the lines below replaces the action creators\r\nexport const {\r\n  filterTodo,\r\n  addTodo,\r\n  deleteTodo,\r\n  switchTodo\r\n} = formReducer.actions;\r\nexport default formReducer.reducer;\r\n\r\n// --------------- old model action creators --------------\r\n/*\r\nexport const addTask = (task) => {\r\n  const word = makeTodo(task);\r\n  return {\r\n    type: \"todo/addTodo\",\r\n    payload: word\r\n  };\r\n};\r\nexport const deleteTask = (id) => {\r\n  return {\r\n    type: \"todo/removeTodo\",\r\n    payload: id\r\n  };\r\n};\r\n\r\nexport const switchTask = (id) => {\r\n  return {\r\n    type: \"todo/switchTodo\",\r\n    payload: id\r\n  };\r\n};\r\n*/\r\n\r\n// --------------------- old model Slicer ---------\r\n/* \r\nconst initialState = [];\r\nexport const formReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"todo/addTodo\":\r\n      return [...state, action.payload];\r\n    case \"todo/removeTodo\":\r\n      return state.filter((item) => item.id !== action.payload);\r\n    case \"todo/switchTodo\":\r\n      return state.map((item) =>\r\n        item.id === action.payload\r\n          ? { ...item, completed: !item.completed }\r\n          : item\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n*/\r\n","import \"./form.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useState } from \"react\";\r\nimport { addTodo, filterTodo } from \"./formSlice.js\";\r\nimport Button from \"@mui/material/Button\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport TextField from \"@mui/material/TextField\";\r\nexport const Form = () => {\r\n  const [task, setTask] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const handleSubmit = (e) => {\r\n    dispatch(addTodo(task));\r\n    e.preventDefault();\r\n    setTask(\"\");\r\n  };\r\n  return (\r\n    <main className=\"form-div\">\r\n      <form className=\"form-component-div\" onSubmit={handleSubmit}>\r\n        <TextField\r\n          name=\"todo\"\r\n          id=\"outlined-textarea\"\r\n          label=\"Add Task\"\r\n          placeholder=\"Add Task\"\r\n          value={task}\r\n          required\r\n          onChange={(e) => setTask((prev) => e.target.value.toUpperCase())}\r\n        ></TextField>\r\n        <div className=\"form-button-div\">\r\n          <Button type=\"submit\" variant=\"contained\" endIcon={<AddIcon />}>\r\n            Add Task\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(filterTodo())}\r\n            variant=\"contained\"\r\n            endIcon={<DeleteIcon />}\r\n          >\r\n            Delete Completed\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </main>\r\n  );\r\n};\r\n","// selectors\r\nexport const selectAllTodos = (state) => state.allTodo;\r\n","import \"./display.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectAllTodos } from \"./displaySlice.js\";\r\nimport { switchTodo, deleteTodo } from \"../form/formSlice.js\";\r\nimport Button from \"@mui/material/Button\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\n\r\nexport const DisplayTask = () => {\r\n  const taskstoDisplay = useSelector(selectAllTodos);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <main className=\"to-do-div\">\r\n      {taskstoDisplay.map((item) => (\r\n        <section className=\"to-do-item\">\r\n          <div className=\"each-todo-div\">\r\n            <div\r\n              className={\r\n                item.completed\r\n                  ? \"to-do-item-each-p-active\"\r\n                  : \"to-do-item-each-p\"\r\n              }\r\n            >\r\n              <p>{item.todo}</p>\r\n            </div>\r\n            <div className=\"button-div\">\r\n              <Button\r\n                size=\"small\"\r\n                startIcon={<DeleteIcon />}\r\n                color=\"error\"\r\n                onClick={() => dispatch(deleteTodo(item.id))}\r\n                variant=\"outlined\"\r\n              ></Button>\r\n              <Button\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                color=\"success\"\r\n                startIcon={<CheckIcon />}\r\n                onClick={() => dispatch(switchTodo(item.id))}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      ))}\r\n    </main>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nexport default function QuoteMaker() {\r\n  const [quote, setQuote] = useState(\"\");\r\n  async function fetchQuotes() {\r\n    const response = await fetch(\"https://type.fit/api/quotes\");\r\n    const quotes = await response.json();\r\n    return quotes;\r\n  }\r\n  useEffect(() => {\r\n    fetchQuotes().then((data) => {\r\n      setQuote((prev) => data[Math.floor(Math.random() * 1500)].text);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <p>\"{quote}\"</p>\r\n    </div>\r\n  );\r\n}\r\n","const Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <a href=\"mailto:ahmetulutas93@gmail.com\">\r\n        Click here to send me an email\r\n      </a>\r\n    </footer>\r\n  );\r\n};\r\nexport default Footer;\r\n","import \"./styles.css\";\nimport { Form } from \"./form/form.js\";\nimport { DisplayTask } from \"./display/displayTasks.js\";\nimport QuoteMaker from \"./components/quoteMaker.js\";\nimport Footer from \"./components/footer.js\";\nexport default function App() {\n  return (\n    <div className=\"main-container\">\n      <QuoteMaker />\n      <Form />\n      <DisplayTask />\n      <Footer />\n    </div>\n  );\n}\n","import { createStore, combineReducers } from \"redux\";\r\nimport formReducer from \"./form/formSlice.js\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n// ------------ new way of creating store -----------\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    allTodo: formReducer\r\n  }\r\n});\r\nexport default store;\r\n\r\n// ------------ old way of creating store -----------\r\n/*\r\nexport const store = createStore(\r\n  combineReducers({\r\n    allTodo: formReducer.reducer,\r\n    searchTerm: searchTermReducer.reducer\r\n  })\r\n);\r\n*/\r\n","import ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./store.js\";\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}